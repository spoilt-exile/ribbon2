/*
 * This file is part of Ribbon2 news message system.
 * 
 * Copyright (C) 2020 Freax Software
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */
package tk.freaxsoftware.ribbon2.directory.service;

import java.util.Objects;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import tk.freaxsoftware.ribbon2.core.exception.CoreException;
import tk.freaxsoftware.ribbon2.directory.entity.Directory;
import tk.freaxsoftware.ribbon2.directory.repo.DirectoryRepository;
import tk.freaxsoftware.ribbon2.directory.repo.UserRespository;

/**
 * Directory service.
 * @author Stanislav Nepochatov
 */
public class DirectoryService extends AuthService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(DirectoryService.class);

    public DirectoryService(DirectoryRepository directoryRepository, UserRespository userRespository) {
        super(directoryRepository, userRespository);
    }
    
    public Directory createDirectory(Directory directory, String user) {
        LOGGER.info("Create directory {} by user {}", directory.getFullName(), user);
        Set<Directory> directoryBranch = directoryRepository.findDirByPaths(preparePathChunks(directory.getFullName(), ""));
        String lastCreatedDirPath = getPathOfLastDir(directoryBranch);
        if (checkDirAccess(user, directory.getFullName(), "canCreateDir")) {
            String[] requiredDirs = preparePathChunks(directory.getFullName(), lastCreatedDirPath);
            for (String requiredDir: requiredDirs) {
                if (!Objects.equals(requiredDir, directory.getFullName()) 
                        && !Objects.equals(requiredDir, lastCreatedDirPath)) {
                    LOGGER.info("Creating required directory {}", requiredDir);
                    Directory newDir = new Directory();
                    newDir.setFullName(requiredDir);
                    newDir.setName(getNameFromPath(requiredDir));
                    newDir.setDescription("<AUTOGENERATED>");
                    newDir.save();
                }
            }
            directory.setName(getNameFromPath(directory.getFullName()));
            directory.save();
            return directory;
        } else {
            throw new CoreException("NO_PERMISSION", "User doesn't have sufficient permission");
        }
    }
    
    private String getNameFromPath(String path) {
        String[] splited = path.trim().split("\\.");
        return splited[splited.length - 1];
    }
    
    private String[] preparePathChunks(String dirPath, String currentPath) {
        String[] rawChunks = dirPath.substring(currentPath.length()).trim().split("\\.");
        String[] chunks = new String[rawChunks.length];
        for (int i=0; i<rawChunks.length; i++) {
            if (currentPath.isEmpty()) {
                currentPath = rawChunks[i];
            } else {
                if (!rawChunks[i].isBlank()) {
                    currentPath = currentPath + "." + rawChunks[i];
                }
            }
            chunks[i] = currentPath;
        }
        return chunks;
    }
    
    private String getPathOfLastDir(Set<Directory> directories) {
        String path = "";
        for (Directory directory: directories) {
            if (directory.getFullName().length() > path.length()) {
                path = directory.getFullName();
            }
        }
        return path;
    }
}
